#!/usr/bin/env node

const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ Bio-Aryavedic Contact Form Setup\n');
console.log('This script will help you configure email settings and security for the contact form.\n');
console.log('üìß Supported Email Providers:');
console.log('1. Gmail (smtp.gmail.com)');
console.log('2. Outlook/Hotmail (smtp-mail.outlook.com)');
console.log('3. Yahoo Mail (smtp.mail.yahoo.com)');
console.log('4. Custom SMTP\n');

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function setup() {
  try {
    console.log('üìß Email Configuration:');
    const emailProvider = await askQuestion('Choose email provider (1-Gmail, 2-Outlook, 3-Yahoo, 4-Custom): ');
    
    let smtpHost, smtpPort, smtpSecure;
    let passwordLabel = 'password';
    
    switch(emailProvider) {
      case '1':
        smtpHost = 'smtp.gmail.com';
        smtpPort = '587';
        smtpSecure = 'false';
        passwordLabel = 'App Password (16 characters)';
        console.log('\nüìù Gmail Setup Required:');
        console.log('1. Enable 2-factor authentication');
        console.log('2. Go to https://myaccount.google.com/apppasswords');
        console.log('3. Generate app password for "Mail"');
        break;
      case '2':
        smtpHost = 'smtp-mail.outlook.com';
        smtpPort = '587';
        smtpSecure = 'false';
        console.log('\nüìù Outlook Setup: Use your regular password or app password if 2FA enabled');
        break;
      case '3':
        smtpHost = 'smtp.mail.yahoo.com';
        smtpPort = '587';
        smtpSecure = 'false';
        passwordLabel = 'App Password';
        console.log('\nüìù Yahoo Setup: Generate app password in Yahoo Account Security');
        break;
      case '4':
        smtpHost = await askQuestion('Enter SMTP host (e.g., smtp.yourdomain.com): ');
        smtpPort = await askQuestion('Enter SMTP port (usually 587): ');
        smtpSecure = await askQuestion('Use SSL? (true for port 465, false for 587): ');
        break;
      default:
        console.log('‚ùå Invalid selection. Please choose 1-4.');
        rl.close();
        return;
    }

    const emailUser = await askQuestion('Enter your email address: ');
    
    if (!emailUser.includes('@')) {
      console.log('‚ùå Please enter a valid email address.');
      rl.close();
      return;
    }

    const emailPassword = await askQuestion(`Enter your email ${passwordLabel}: `);
    
    if (!emailPassword) {
      console.log('‚ùå Password cannot be empty.');
      rl.close();
      return;
    }

    // reCAPTCHA Configuration
    console.log('\nüîí reCAPTCHA Security Configuration:');
    console.log('To prevent spam, you need to set up Google reCAPTCHA v2.');
    console.log('üìù Setup Instructions:');
    console.log('1. Go to https://www.google.com/recaptcha/admin/create');
    console.log('2. Choose reCAPTCHA v2 -> "I\'m not a robot" Checkbox');
    console.log('3. Add your domain (localhost for development)');
    console.log('4. Copy the Site Key and Secret Key\n');

    const setupRecaptcha = await askQuestion('Do you want to configure reCAPTCHA now? (y/n): ');
    let recaptchaSiteKey = '';
    let recaptchaSecretKey = '';

    if (setupRecaptcha.toLowerCase() === 'y' || setupRecaptcha.toLowerCase() === 'yes') {
      recaptchaSiteKey = await askQuestion('Enter your reCAPTCHA Site Key: ');
      recaptchaSecretKey = await askQuestion('Enter your reCAPTCHA Secret Key: ');
      
      if (!recaptchaSiteKey || !recaptchaSecretKey) {
        console.log('‚ö†Ô∏è  Warning: reCAPTCHA keys are empty. Contact form will not work without them.');
        console.log('You can add them later to the .env.local file.');
      }
    } else {
      console.log('‚ö†Ô∏è  Warning: Skipping reCAPTCHA setup. Contact form will not work without it.');
      console.log('You can add the keys later to the .env.local file.');
    }

    // Create .env.local file
    const envContent = `# Email Configuration for Contact Form
# Generated by setup script on ${new Date().toISOString()}

EMAIL_USER=${emailUser}
EMAIL_PASSWORD=${emailPassword}
SMTP_HOST=${smtpHost}
SMTP_PORT=${smtpPort}
SMTP_SECURE=${smtpSecure}

# Google reCAPTCHA v2 Configuration
# Get these keys from: https://www.google.com/recaptcha/admin/create
NEXT_PUBLIC_RECAPTCHA_SITE_KEY=${recaptchaSiteKey}
RECAPTCHA_SECRET_KEY=${recaptchaSecretKey}

# Add your Shopify configuration here if needed
# NEXT_PUBLIC_SHOPIFY_DOMAIN=your-store.myshopify.com
# NEXT_PUBLIC_SHOPIFY_STOREFRONT_TOKEN=***
# NEXT_PUBLIC_SHOPIFY_API_VERSION=2025-07
# NEXT_PUBLIC_SHOPIFY_COLLECTION_HANDLE=website
`;

    fs.writeFileSync('.env.local', envContent);
    
    console.log('\n‚úÖ Environment file created successfully!');
    console.log('üìß Emails will be sent to: info@aryavedicnaturals.com');
    console.log('üîß Configuration saved to .env.local');
    console.log(`üì° SMTP: ${smtpHost}:${smtpPort}`);
    if (recaptchaSiteKey && recaptchaSecretKey) {
      console.log('üîí reCAPTCHA: Configured and ready');
    } else {
      console.log('‚ö†Ô∏è  reCAPTCHA: Not configured - contact form will not work');
    }
    console.log('\nüöÄ You can now run: npm run dev');
    console.log('üìã Test the contact form at: http://localhost:3000');

  } catch (error) {
    console.error('‚ùå Error setting up environment:', error.message);
  } finally {
    rl.close();
  }
}

setup(); 